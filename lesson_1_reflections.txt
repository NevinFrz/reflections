1. How did viewing a diff between two versions of a file help you see the bug
that was introduced?

It helped me spot out the bug easily and much faster. It highlights the line
number where the bug occurred.

2. How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Easy access to the entire history of a code will make it easy for me to go to an
old state, compare the differences. It saves me from the trouble of saving multiple
files.

3. What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Manual saving is done on a purpose, so the programmer knows what changes take place
during each commit. Therefore is it easier to identify the commit points.
On the other hand, automatic commit doesn't give a clue to the programmer on the
changes made between the current and previous commits.

4. Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git was designed with code in mind, where coding involves lot of files getting
changed for a single problem. But google docs where designed to handle documents
where there is no relationship between multiple files.

5. How can you use the commands git log and git diff to view the history of files?

git log helps me to view all the commits and git diff helps me to view all the
difference of two commits

6. How might using version control make you more confident to make changes that
could break something?

I can find the errors

7. Now that you have your workspace set up, what do you want to try using Git for?

Coding
